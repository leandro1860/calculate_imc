{"version":3,"sources":["components/TitleComponent.js","components/CalculateComponent.js","components/TableComponent.js","components/MainTitleComponent.js","App.js","serviceWorker.js","index.js"],"names":["TitleComponent","className","PureComponent","CalculateComponent","props","state","height","weight","handleHeight","bind","handleWeight","clickIMC","event","this","setState","target","value","indexOf","alert","result","toFixed","resultMessage","Form","Group","controlId","Label","Control","type","id","min","max","placeholder","onChange","Button","variant","onClick","React","Component","TableComponent","Table","striped","bordered","hover","size","colSpan","MainTitleComponent","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4c20c5e1.chunk.js","sourcesContent":["import React, { PureComponent } from 'react'\n\nclass TitleComponent extends PureComponent {\n  render () {\n    return (\n      <div className=\"titleOne container-fluid\">\n        <h1 className=\"titleTwo\">¿Que es el IMC?</h1>\n        <h3>\n          {' '}\n          El índice de Masa Corporal (IMC) es la fórmula para determinar el peso\n          ideal y saludable de una persona según su estatura y su peso actual.\n          Para determinar si una persona está por encima de su peso ideal o está\n          demasiado delgada se utiliza el IMC o Índice de Masa Corporal, también\n          conocido como BMI (Body Mass Index) o IQ (Índice de Quetelet). Por\n          regla general, el resultado que se obtiene del Índice de masa Corporal\n          puede determinar si su estado físico y de salud es bueno o por el\n          contrario debe cuidarse en mayor medida.\n        </h3>\n      </div>\n    )\n  }\n}\n\nexport default TitleComponent\n","import React from 'react'\nimport { Button, Form } from 'react-bootstrap'\n\nclass CalculateComponent extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = { height: '', weight: '' }\n\n    this.handleHeight = this.handleHeight.bind(this)\n    this.handleWeight = this.handleWeight.bind(this)\n    this.clickIMC = this.clickIMC.bind(this)\n  }\n\n  handleHeight (event) {\n    this.setState({ height: event.target.value })\n  }\n\n  handleWeight (event) {\n    this.setState({ weight: event.target.value })\n  }\n\n  clickIMC () {\n    const { height, weight } = this.state\n    if (\n      height.indexOf('.') !== -1 || weight.indexOf('.') !== -1 || height.indexOf('-') !== -1 || weight.indexOf('-') !== -1\n    ) {\n      /* eslint-disable no-alert */\n      alert('Por favor, ingrese solo números')\n    } else if (height !== '' && weight !== '') {\n      if (height >= 0 && weight >= 0) {\n        const result = ((weight / (height * height)) * 10000).toFixed(1)\n        const resultMessage = `Para un peso de\n        ${weight}kg y una altura de\n        ${height}cm, tu IMC es de:\n        ${result}`\n        this.setState({ resultMessage })\n      } else {\n        alert('Por favor, ingrese los datos correctamente')\n      }\n    }\n  }\n\n  render () {\n    const { resultMessage } = this.state\n    return (\n      <div>\n        <div className=\"form\">\n          <Form>\n            <Form.Group controlId=\"formBasicEmail\">\n              <Form.Label>Peso en Kg</Form.Label>\n              <Form.Control\n                type=\"number\"\n                id=\"weight\"\n                min=\"0\"\n                max=\"0\"\n                placeholder=\"Ingresá tu peso en kilogramos\"\n                onChange={this.handleWeight}\n              />\n            </Form.Group>\n            <Form.Group controlId=\"formBasicPassword\">\n              <Form.Label>Altura en cm</Form.Label>\n              <Form.Control\n                type=\"number\"\n                placeholder=\"Ingesá tu altura en centímetros\"\n                onChange={this.handleHeight}\n              />\n            </Form.Group>\n          </Form>\n        </div>\n        <div className=\"buttonCalculate\">\n          <Button variant=\"primary\" onClick={this.clickIMC}>\n            Calcular\n          </Button>\n        </div>\n        <div className=\"result\">{resultMessage}</div>\n      </div>\n    )\n  }\n}\n\nexport default CalculateComponent\n","import React, { PureComponent } from 'react'\nimport { Table } from 'react-bootstrap'\n\nclass TableComponent extends PureComponent {\n  render () {\n    return (\n      <div>\n        <div className=\"table\">\n          <Table striped bordered hover size=\"sm\">\n            <thead>\n              <tr>\n                <th className=\"titles\">IMC</th>\n                <th className=\"titles\">Categoria</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td>menos de 18.5</td>\n                <td>Peso insuficiente</td>\n              </tr>\n              <tr>\n                <td>18.5 - 24.9</td>\n                <td>Peso normal</td>\n              </tr>\n              <tr>\n                <td>25 - 26.9</td>\n                <td colSpan=\"2\">Sobrepeso grado I</td>\n              </tr>\n              <tr>\n                <td>27 - 29.9</td>\n                <td>Sobrepeso grado II</td>\n              </tr>\n              <tr>\n                <td>30 - 34.9</td>\n                <td>Obesidad de tipo I</td>\n              </tr>\n              <tr>\n                <td>35 - 39.9</td>\n                <td colSpan=\"2\">Obesidad de tipo II</td>\n              </tr>\n              <tr>\n                <td>40 - 49.9</td>\n                <td>Obesidad de tipo III</td>\n              </tr>\n              <tr>\n                <td>mas de 50</td>\n                <td colSpan=\"2\">Obesidad de tipo IV</td>\n              </tr>\n            </tbody>\n          </Table>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default TableComponent\n","import React, { PureComponent } from 'react'\n\nclass MainTitleComponent extends PureComponent {\n  render () {\n    return (\n      <div>\n        <h1 className=\"titleThree\">\n          Ingresá tus datos para calcular tu masa corporal\n        </h1>\n      </div>\n    )\n  }\n}\n\nexport default MainTitleComponent\n","import React from 'react';\nimport TitleComponent from './components/TitleComponent.js';\nimport CalculateComponent from './components/CalculateComponent.js';\nimport TableComponent from './components/TableComponent.js';\nimport MainTitleComponent from './components/MainTitleComponent.js';\nimport './components/styles/TitleComponent.css';\nimport './components/styles/CalculateComponent.css';\nimport './components/styles/TableComponent.css';\nimport './components/styles/MainTitleComponent.css';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <MainTitleComponent />\n        <CalculateComponent />\n        <TableComponent />\n        <TitleComponent />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}